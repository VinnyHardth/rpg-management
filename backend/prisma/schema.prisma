// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.Char(36)
  email     String      @unique @db.VarChar(150)
  username  String      @unique @db.VarChar(30)
  password  String      @db.VarChar(60)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Campaign  Campaign[]
  Character Character[]

  @@map("users")
}

model RpgSystem {
  id        String     @id @default(uuid()) @db.Char(36)
  name      String     @unique @db.VarChar(100)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Campaign  Campaign[]

  @@map("rpg_systems")
}

model Campaign {
  id          String      @id @default(uuid()) @db.Char(36)
  name        String      @unique @db.VarChar(100)
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @map("user_id")
  rpgSystem   RpgSystem   @relation(fields: [rpgSystemId], references: [id])
  rpgSystemId String      @map("rpg_system_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  Character   Character[]

  @@map("campaigns")
}

model Character {
  id         String   @id @default(uuid()) @db.Char(36)
  name       String   @db.VarChar(100)
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String   @map("campaign_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("characters")
}

model StatusType {
  id              String            @id @default(uuid()) @db.Char(36)
  name            String            @unique @db.VarChar(100)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  PrimaryStatus   PrimaryStatus[]
  SecondaryStatus SecondaryStatus[]

  @@map("status_types")
}

model PrimaryStatus {
  id        String     @id @default(uuid()) @db.Char(36)
  name      String     @unique @db.VarChar(100)
  value     Int        @default(0) @db.SmallInt
  type      StatusType @relation(fields: [typeId], references: [id])
  typeId    String     @map("type_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("primary_status")
}

model SecondaryStatus {
  id        String     @id @default(uuid()) @db.Char(36)
  name      String     @unique @db.VarChar(100)
  value     Int        @default(0) @db.SmallInt
  type      StatusType @relation(fields: [typeId], references: [id])
  typeId    String     @map("type_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("secondary_status")
}
